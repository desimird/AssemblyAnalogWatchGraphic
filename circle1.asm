TITLE SAT

ASSUME CS:CSEG, DS:DSEG, ES:DSEG, SS:SSEG
	EXTRN SET_NEW_INT_RUT:NEAR, RETURN_OLD_INT_RUT:NEAR

DSEG SEGMENT PARA PUBLIC 'DATA'
	X1 DW 0B4h  ; KOORDINATE DRUGE TACKE ZA ISCRTAVANJE LINIJA
	Y1 DW 78h
	YI DW 1
	XI DW 1   ; ZAVISNO OD NAGIBA LINIJE MOZE BITI -1 ILI 1 
	
	R DW 2Dh
	R_DOT DW 2Ah	
	X_CENTER DW 0A0h
	Y_CENTER DW 64h
	
	X_ARRAY DW 60 DUP (?)  ;POMOCNI NIZ KOORDINATA POZICIJA SEKUNDI NA SATU
	Y_ARRAY DW 60 DUP (?)
	X_ARRAY_FULL DW 60 DUP (?) ;KONACNE VREDNOSTI KOORDIANTA SEKUNDI
	Y_ARRAY_FULL DW 60 DUP (?)
	X_ARRAY_HOUR DW 60 DUP (?)
	Y_ARRAY_HOUR DW 60 DUP (?)
	ARRAY_CNT DW -2
	
	SEC_NUM DW -2		
	MIN_NUM DW 0
	H_NUM DW 0
	
	
	
	OLD_INT_ADR DW 0h, 0h
	
DSEG ENDS

CSEG SEGMENT PARA PUBLIC 'CODE'

	MAIN PROC FAR
		
		MOV AX, DSEG
		MOV DS, AX
		MOV ES, AX
		MOV AX, SSEG
		MOV SS, AX
		
		CALL CLEAR_SCREEN			;OVAJ DEO SLUZI SAMO ZA IZRACUNAVANJE KOORDINATA ALI POSTO DOK ISCRTAVA KRUZNICU 
		CALL BERSENHAM_CIRC_DOT		;UPISUJE U X_ARRAY/Y_ARRAY MORA DA BUDE U VIDEO MODU
		CALL CALC_COOR_1
		MOV R_DOT, 1Dh				;DEO KOJI RACUNA I UPISUJE U ARRAY_HOUR NIZOVE KOORDIANTE TACAKA ZA SATE TJ DA BI KAZALJKA ZA SATE BILA KRACA
		CALL BERSENHAM_CIRC_DOT
		CALL CALC_COOR_2
				
		
		MOV DX, OFFSET INTERUPT_RUT
		MOV AX, SEG CSEG
		
		PUSH DS
		MOV DS, AX
		CALL SET_NEW_INT_RUT
		POP DS
				
				
		GET_KEY:
					
			XOR AH, AH
			INT 16h
			CMP AH, 01h
			JNE GET_KEY
			
			CALL RETURN_OLD_INT_RUT
			
			MOV AH,4Ch
			INT 21h
			
		
	MAIN ENDP
	
	INTERUPT_RUT PROC FAR
	
		PUSH DS
		
		MOV AX, SEG DSEG
		MOV DS, AX
		
		
		
			
		CALL CLEAR_SCREEN	
			
		CALL BERSENHAM_CIRC			;ISCRTAVANJE OKVIRA
		CALL BERSENHAM_CIRC_DOT		;ISCRTAVANJE INDIKATORA SEKUNDI
				
		CALL TIME_FUNC_SEC			;DOHVATANJE ODGOVARAJUCIH KOORDINATA KOJE SE POKLAPAJU SA TRENUTNIM SEKUNDAMA
		CALL BRESENHAM_LINE			;ISCRTAVANJE KAZALJKE(SEKUNDARA)
		CALL TIME_FUNC_MIN			;DOHVATANJE ODGOVARAJUCIH KOORDINATA KOJE POKAZUJU MINUTE
		CALL BRESENHAM_LINE			
		CALL TIME_FUNC_H			;DOHVATANJE ODGOVARAJUCIH KOORDIANTA KOEJ POKAZUJU SATE
		CALL BRESENHAM_LINE
				
		POP DS
		IRET
	
	INTERUPT_RUT ENDP
	
	CLEAR_SCREEN PROC NEAR
		
		MOV AH, 00h
		MOV AL, 13h
		INT 10h			;VIDEO KONFIGURACIJA
			
		MOV AH, 0Bh
		MOV BL, 00h
		MOV BH, 00h
		INT 10h			;BOJA POZADINE
			
		RET
	CLEAR_SCREEN ENDP
	
	TIME_FUNC_SEC PROC NEAR
		
		PUSH DX
		PUSH DI
		PUSH AX
		PUSH BX
		PUSH SI
		
		MOV AH, 2Ch
		INT 21h
		
		MOV AL, DH
		CBW
		SHL AX, 1 			;POSTO JE NIZ X_ARRAY_FULL/Y_ARRAY_FULL DW JEDNA KOORDINATA ZAUZIMA 2 MESTA PA MNOZIMO BROJ SEKUNDI SA 2
		MOV SEC_NUM, AX
	
		MOV SI, OFFSET X_ARRAY_FULL
		MOV DI, OFFSET Y_ARRAY_FULL
		ADD SI, SEC_NUM
		ADD DI, SEC_NUM
		MOV AX, [SI]
		MOV BX, [DI]
		MOV X1, AX
		MOV Y1, BX
		
		POP SI
		POP BX
		POP AX
		POP DI
		POP DX 
		RET
		
		
	TIME_FUNC_SEC ENDP
	
	TIME_FUNC_MIN PROC NEAR
	
		PUSH DX
		PUSH DI
		PUSH AX
		PUSH BX
		PUSH SI
		
		MOV AH, 2Ch
		INT 21h
		
		MOV AL, CL
		CBW
		SHL AX, 1
		MOV MIN_NUM, AX
		
		MOV SI, OFFSET X_ARRAY_FULL
		MOV DI, OFFSET Y_ARRAY_FULL
		ADD SI, MIN_NUM
		ADD DI, MIN_NUM
		MOV AX, [SI]
		MOV BX, [DI]
		MOV X1, AX
		MOV Y1, BX
		
		
		
		POP SI
		POP BX
		POP AX
		POP DI
		POP DX 
		RET
	TIME_FUNC_MIN ENDP
	
	TIME_FUNC_H PROC NEAR
	
		PUSH DX
		PUSH DI
		PUSH AX
		PUSH BX
		PUSH SI
		
		MOV AH, 2Ch
		INT 21h
		
		MOV AL, CH
		CBW
		SHL AX, 1
		MOV BX, 5
		MUL BX
		CMP AX, 120
		JE SET_FOR_12
		MOV H_NUM, AX
		
		CONTINUE_4:
			MOV SI, OFFSET X_ARRAY_HOUR
			MOV DI, OFFSET Y_ARRAY_HOUR
			ADD SI, H_NUM
			ADD DI, H_NUM
			MOV AX, [SI]
			MOV BX, [DI]
			MOV X1, AX
			MOV Y1, BX
		
			POP SI
			POP BX
			POP AX
			POP DI
			POP DX 
			RET
		
		SET_FOR_12:
			MOV H_NUM, 0
			JMP CONTINUE_4
		
	TIME_FUNC_H ENDP
	
	BERSENHAM_CIRC PROC NEAR
		
		XOR CX, CX		;POSTAVLJANJE X NA 0 POCETNI USLOV 		
		MOV DX, R		;POSTAVLJANJE Y NA R POCETNI USLOV
		MOV AX, DX		
		ADD AX, AX		; 2*R
		NEG AX			; -2*R
		ADD AX, 3		; AX = 3-2*R = d
		CALL DRAW_CIRCLE
		LOOP_1:
			CMP AX, 0
			JLE FIRST_CASE
			JG SECOND_CASE
			CONTINUE:
				CALL DRAW_CIRCLE
				CMP CX, DX         ;USLOV ZA KRAJ X = Y 
				JNE LOOP_1
		
		RET
		
		FIRST_CASE:
			INC CX
			MOV BX, CX
			;SHL BX, 2  ;4*Xk  ; IZ NEKOG RAZLOGA JE PRAVIO PROBLEM KADA JE BILO MNOZENJE SA SHL PA SAM SABIRAO VISE PUTA
			ADD BX,BX
			ADD BX,BX
			ADD AX, BX; D+4*Xk
			ADD AX, 6  ;Di+1 = D+4Xk+6
			JMP CONTINUE
			
			
		SECOND_CASE:
			INC CX	
			DEC DX
			MOV BX, CX 
			SUB BX, DX ;Xk - Yk
			;SHL BX, 2  ;4(Xk - Yk)		; IZ NEKOG RAZLOGA JE PRAVIO PROBLEM KADA JE BILO MNOZENJE SA SHL PA SAM SABIRAO VISE PUTA
			ADD BX,BX
			ADD BX,BX
			ADD AX, BX ; D +4(Xk - Yk)
			ADD AX, 10
			JMP CONTINUE
			
			
		
	BERSENHAM_CIRC ENDP
	
	BERSENHAM_CIRC_DOT PROC NEAR
		
		MOV ARRAY_CNT, -2 
		
		XOR SI, SI
		MOV BX, 4		;BROJAC DA BI SE ISCRTAVLE SAMO SVAKA 4 TACKA UMESTO CELE KRUZNICE
		
		XOR CX, CX		;POSTAVLJANJE X NA 0 POCETNI USLOV
		MOV DX, R_DOT	;POSTAVLJANJE Y NA R POCETNI USLOV
		MOV AX, DX
		;SHL AX, 1		; 2*R
		ADD AX, AX
		NEG AX			; -2*R
		ADD AX, 3		; AX = 3-2*R = d
		CALL DRAW_CIRCLE_DOT ; poziv ove funkcije crta po tacku na mestima sekundi
		LOOP_1_D:
			INC SI
			CMP AX, 0
			JLE FIRST_CASE_D
			JG SECOND_CASE_D
			CONTINUE_D:
				CMP CX, DX
				JE END_IT
				CMP SI, BX
				JE DRAW_1
				JMP LOOP_1_D
				
		
		
		DRAW_1:
			ADD BX, 4
			CALL DRAW_CIRCLE_DOT
			CMP CX, DX
			JNE LOOP_1_D
			RET
		
		FIRST_CASE_D:
			PUSH BX
			INC CX
			MOV BX, CX
			;SHL BX, 2  ;4*Xk
			ADD BX,BX
			ADD BX,BX
			ADD AX, BX; D+4*Xk
			ADD AX, 6  ;Di+1 = D+4Xk+6
			POP BX
			JMP CONTINUE_D
			
			
		SECOND_CASE_D:
			PUSH BX
			INC CX	
			DEC DX
			MOV BX, CX 
			SUB BX, DX ;Xk - Yk
			;SHL BX, 2  ;4(Xk - Yk)
			ADD BX,BX
			ADD BX,BX
			ADD AX, BX ; D +4(Xk - Yk)
			ADD AX, 10
			POP BX
			JMP CONTINUE_D
			
		END_IT:
			RET
			
		
	BERSENHAM_CIRC_DOT ENDP
	
	DRAW_CIRCLE PROC NEAR
			
			PUSH BX
			PUSH AX
			PUSH CX
			PUSH DX
			
			
			ADD CX, X_CENTER 	;1OCTAN
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 2
			POP CX
			PUSH CX
			PUSH DX	
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 3
			POP CX
			PUSH CX
			PUSH DX
			NEG CX
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 4
			POP CX
			PUSH CX
			PUSH DX
			NEG DX
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 5
			POP CX
			PUSH CX
			PUSH DX
			NEG CX
			NEG DX
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 6
			POP CX
			PUSH CX
			PUSH DX
			NEG CX
			NEG DX
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 7
			POP CX
			PUSH CX
			PUSH DX
			NEG DX
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 8
			POP CX
			PUSH CX
			PUSH DX	
			NEG CX
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			
			POP DX
			POP CX
			POP AX
			POP BX
			RET
	
	DRAW_CIRCLE ENDP
	
	DRAW_CIRCLE_DOT PROC NEAR ;JEDINA RAZLIKA IZMEDJU DRAW_CIRCLE I DRAW_CIRCLE_DOT FUNCKIJE JE TA STO DRAW_CIRCLE_DOT UPISUJE
							  ;KOORDIANTE U X_ARRAY/Y_ARRAY OVO JE MOGLO DA SE NEKIM POREDJENJEM URADI NA ELEGANTNIJI NACIN(AKO BUDES STIGAO PROMENI TO)
			PUSH BX
			PUSH AX
			PUSH CX
			PUSH DX
			
			
			ADD CX, X_CENTER 	;1OCTAN
			ADD DX, Y_CENTER
			CALL WRITE_COOR
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 2
			POP CX
			PUSH CX
			PUSH DX	
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 3
			POP CX
			PUSH CX
			PUSH DX
			NEG CX
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 4
			POP CX
			PUSH CX
			PUSH DX
			NEG DX
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 5
			POP CX
			PUSH CX
			PUSH DX
			NEG CX
			NEG DX
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 6
			POP CX
			PUSH CX
			PUSH DX
			NEG CX
			NEG DX
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 7
			POP CX
			PUSH CX
			PUSH DX
			NEG DX
			CALL INVERSE
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			POP DX				;OCTANE 8
			POP CX
			PUSH CX
			PUSH DX	
			NEG CX
			ADD CX, X_CENTER
			ADD DX, Y_CENTER
			MOV AH, 0Ch
			MOV AL, 0Ah
			MOV BH, 00h
			INT 10h
			
			
			POP DX
			POP CX
			POP AX
			POP BX
			RET
			
	DRAW_CIRCLE_DOT ENDP
	
	
	INVERSE PROC NEAR
		
		MOV AX, CX
		MOV CX, DX
		MOV DX, AX
		RET
	INVERSE ENDP
	
	WRITE_COOR PROC NEAR
		
		PUSH BX
		PUSH AX
		PUSH CX
		PUSH DX
		PUSH SI
		
		MOV AX, ARRAY_CNT
		INC AX
		INC AX
		MOV ARRAY_CNT, AX

		MOV BX, OFFSET X_ARRAY
		MOV DI, OFFSET Y_ARRAY
		
		ADD BX, AX
		ADD DI, AX
		MOV [BX], CX
		MOV [DI], DX
		
		POP SI
		POP DX
		POP CX
		POP AX
		POP BX
		RET
		
	WRITE_COOR ENDP
	
	
	CALC_COOR_1 PROC NEAR  ;ISTA LOGIKA KAO KOD ISCRTAVANJA KRUZNICE SAMO STO OVDE PAKUJE U NIZ TACKE REDOM ZBOG TOGA STO PREKO TIH KOORDINATA
						   ;TREBA USMERAVATI KAZALJKE
		PUSH BX
		PUSH AX
		PUSH CX
		PUSH DX
		PUSH SI
	
		XOR AX, AX
		MOV DX, 16
		SUB AX, 2
		
		LOOP_C_5:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET Y_ARRAY
			MOV DI, OFFSET X_ARRAY
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			SUB BX, Y_CENTER
			ADD BX, X_CENTER
			MOV [DI+16], BX
			MOV SI, OFFSET X_ARRAY
			MOV DI, OFFSET Y_ARRAY
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			SUB BX, X_CENTER
			ADD BX, Y_CENTER
			MOV [DI+16], BX
			CMP AX, 14
			JNE LOOP_C_5
		
		;QUAD 1
		XOR AX, AX
		SUB AX, 2
		
		LOOP_C_1:
			INC AX
			INC AX
			MOV SI, OFFSET X_ARRAY
			MOV DI, OFFSET X_ARRAY_FULL
			ADD SI, AX
			ADD DI, AX
			MOV BX, [SI]
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY
			MOV DI, OFFSET Y_ARRAY_FULL
			ADD SI, AX
			ADD DI, AX
			MOV BX, [SI]
			PUSH AX
			SUB BX, Y_CENTER
			MOV AX, Y_CENTER
			SUB AX, BX
			MOV BX, AX
			POP AX
			MOV [DI], BX
			CMP AX,30
			JNE LOOP_C_1
	
		;QUAD 2
		XOR AX, AX
		SUB AX, 2
		MOV DX, 62
		
		LOOP_C_2:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET X_ARRAY_FULL
			MOV DI, OFFSET X_ARRAY_FULL
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY_FULL
			MOV DI, OFFSET Y_ARRAY_FULL
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			PUSH AX
			MOV AX, Y_CENTER
			SUB AX, BX
			MOV BX, AX
			ADD BX, Y_CENTER
			POP AX
			MOV [DI], BX
			CMP AX,30
			JNE LOOP_C_2
	
		;QUAD 3
		MOV AX, 28
		MOV DX, 92
		
		LOOP_C_3:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET X_ARRAY_FULL
			MOV DI, OFFSET X_ARRAY_FULL
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			PUSH AX
			SUB BX, X_CENTER
			MOV AX, X_CENTER
			SUB AX, BX
			MOV BX, AX
			POP AX
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY_FULL
			MOV DI, OFFSET Y_ARRAY_FULL
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			MOV [DI], BX
			CMP AX,60
			JNE LOOP_C_3
			
			
		;QUAD 4
		XOR AX, AX
		SUB AX, 2
		MOV DX, 120
		
		LOOP_C_4:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET X_ARRAY_FULL
			MOV DI, OFFSET X_ARRAY_FULL
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			PUSH AX
			SUB BX, X_CENTER
			MOV AX, X_CENTER
			SUB AX, BX
			MOV BX, AX
			POP AX
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY_FULL
			MOV DI, OFFSET Y_ARRAY_FULL
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			MOV [DI], BX
			CMP AX,30
			JNE LOOP_C_4
			
	POP SI
	POP DX
	POP CX
	POP AX
	POP BX
	
	RET
	
	CALC_COOR_1 ENDP
	
	CALC_COOR_2 PROC NEAR
	
	
		MOV R_DOT, 2Ah
		PUSH BX
		PUSH AX
		PUSH CX
		PUSH DX
		PUSH SI
	
		XOR AX, AX
		MOV DX, 16
		SUB AX, 2
		
		LOOP_C_6:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET Y_ARRAY
			MOV DI, OFFSET X_ARRAY
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			SUB BX, Y_CENTER
			ADD BX, X_CENTER
			MOV [DI+16], BX
			MOV SI, OFFSET X_ARRAY
			MOV DI, OFFSET Y_ARRAY
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			SUB BX, X_CENTER
			ADD BX, Y_CENTER
			MOV [DI+16], BX
			CMP AX, 14
			JNE LOOP_C_6
		
		;QUAD 1
		XOR AX, AX
		SUB AX, 2
		
		LOOP_C_7:
			INC AX
			INC AX
			MOV SI, OFFSET X_ARRAY
			MOV DI, OFFSET X_ARRAY_HOUR
			ADD SI, AX
			ADD DI, AX
			MOV BX, [SI]
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY
			MOV DI, OFFSET Y_ARRAY_HOUR
			ADD SI, AX
			ADD DI, AX
			MOV BX, [SI]
			PUSH AX
			SUB BX, Y_CENTER
			MOV AX, Y_CENTER
			SUB AX, BX
			MOV BX, AX
			POP AX
			MOV [DI], BX
			CMP AX,30
			JNE LOOP_C_7
	
		;QUAD 2
		XOR AX, AX
		SUB AX, 2
		MOV DX, 62
		
		LOOP_C_8:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET X_ARRAY_HOUR
			MOV DI, OFFSET X_ARRAY_HOUR
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY_HOUR
			MOV DI, OFFSET Y_ARRAY_HOUR
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			PUSH AX
			MOV AX, Y_CENTER
			SUB AX, BX
			MOV BX, AX
			ADD BX, Y_CENTER
			POP AX
			MOV [DI], BX
			CMP AX,30
			JNE LOOP_C_8
	
		;QUAD 3
		MOV AX, 28
		MOV DX, 92
		
		LOOP_C_9:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET X_ARRAY_HOUR
			MOV DI, OFFSET X_ARRAY_HOUR
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			PUSH AX
			SUB BX, X_CENTER
			MOV AX, X_CENTER
			SUB AX, BX
			MOV BX, AX
			POP AX
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY_HOUR
			MOV DI, OFFSET Y_ARRAY_HOUR
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			MOV [DI], BX
			CMP AX,60
			JNE LOOP_C_9
			
			
		;QUAD 4
		XOR AX, AX
		SUB AX, 2
		MOV DX, 120
		
		LOOP_C_10:
			INC AX
			INC AX
			DEC DX
			DEC DX
			MOV SI, OFFSET X_ARRAY_HOUR
			MOV DI, OFFSET X_ARRAY_HOUR
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			PUSH AX
			SUB BX, X_CENTER
			MOV AX, X_CENTER
			SUB AX, BX
			MOV BX, AX
			POP AX
			MOV [DI], BX
			MOV SI, OFFSET Y_ARRAY_HOUR
			MOV DI, OFFSET Y_ARRAY_HOUR
			ADD SI, AX
			ADD DI, DX
			MOV BX, [SI]
			MOV [DI], BX
			CMP AX,30
			JNE LOOP_C_10
			
		POP SI
		POP DX
		POP CX
		POP AX
		POP BX
	
		RET
	
	
	CALC_COOR_2 ENDP
	
	BRESENHAM_LINE PROC NEAR
	
		PUSH CX
		PUSH DX
		PUSH AX
		PUSH BX
		PUSH DI
		
		MOV CX, X_CENTER
		MOV DX, Y_CENTER
		MOV AX, X1
		MOV BX, Y1
		
		MOV SI, X1
		SUB SI, CX   ;RAZLIKA X KOORDINATA X1 - X0
		CMP SI, 0	 ;U SLUVAJU DA JE OVO NEGATIVNO ISPRAVITI TO DA BI POREDJENJE PO KOJOJ KOORDINATI JE VECA PROMENA BILO TACNO
		JL NEG_SI
		CONT_0:
			MOV DI, Y1
			SUB DI, DX ;RAZLIKA Y KOORDINATA
			CMP DI, 0  ;ISTO KAO ZA RAZLIKU PO X
			JL NEG_DI
		
		FIRST_IF:
			CMP DI, SI         	;U ODNOSU DA LI JE PROMENA VECA PO X ILI PO Y DRUGACIJE SE RACUNAJU KOORDINATE LINIJE DA LI ODLUKA VRSI NAD X ILI NAD Y KOORDINATOM
			JL LINE_LOW_CALL
			JGE LINE_HIGH_CALL
		
		
		NEG_SI:
			NEG SI
			JMP CONT_0
		
		NEG_DI:
			NEG DI
			JMP FIRST_IF
			
		LINE_LOW_CALL:				; SLUCAJ KADA JE VECA PROMENA PO X OSI
			CALL LINE_LOW
			POP DI
			POP BX
			POP AX
			POP DX
			POP CX
			RET
		
		LINE_HIGH_CALL:				; SLUCAJ KADA JE VECA PROMENA PO Y OSI
			CALL LINE_HIGH
			POP DI
			POP BX
			POP AX
			POP DX
			POP CX
			RET
			

	BRESENHAM_LINE ENDP
	
	LINE_LOW PROC NEAR
		PUSH CX
		PUSH DX
		PUSH AX
		PUSH BX
		PUSH DI
		
		MOV CX, X_CENTER
		MOV DX, Y_CENTER
		MOV AX, X1
		MOV BX, Y1
		
		CMP CX, AX 				; I OVDE POSTOJE DVA SLUCAJA KAKO BI SE POKRILA SVA 4 KVADRANTA OKO CENTRA 
		JG LINE_LOW_1
		JLE LINE_LOW_2
		
		LINE_LOW_2:
			SUB AX, CX  ; dX = X1 - X0
			SUB BX, DX	; dY = Y1 - Y0
			MOV YI, 1						
			CMP BX, 0					; PROVERA DA LI Y KOORDINATA TREBA DA SE INKREMENTIRA ILI DEKREMENTIRA ZAVISNO OD POLOZAJA IZMEDJU KOORDINATA
			JL NEG_Y_SLOPE
			CONT_1:
				MOV SI, BX ; dY
				SHL SI, 1  ; 2* dY
				SUB SI, AX ; 2*dY - dX
				MOV DX, Y_CENTER
				MOV CX, X_CENTER
				FOR_0:
					CALL DRAW_LINE
					CMP SI, 0
					JG FISRT_CASE_0
					JLE SECOND_CASE_0
					CONTINUE_0:
						INC CX
						CMP CX, X1
						JNE FOR_0
						POP DI
						POP BX
						POP AX
						POP DX
						POP CX
						RET
		
		
		LINE_LOW_1:
			SUB CX, AX ; dX = X0 - X1
			MOV AX, CX ; dX IDE U AX
			SUB DX, BX ; dY = Y0 - Y1
			MOV BX, DX ; dy IDE U BX
			MOV YI, 1
			CMP BX, 0 
			JL NEG_Y_SLOPE_1
			CONT_2:
				MOV SI, BX ; dY
				SHL SI, 1  ; 2*dY
				SUB SI, AX ; 2*dY - dX
				MOV DX, Y1
				MOV CX, X1
				FOR_1:
					CALL DRAW_LINE
					CMP SI, 0
					JG FISRT_CASE_1
					JLE SECOND_CASE_1
					CONTINUE_1:
						INC CX
						CMP CX, X_CENTER
						JNE FOR_1
						POP DI
						POP BX
						POP AX
						POP DX
						POP CX
						RET
		
		NEG_Y_SLOPE:
			MOV YI, -1
			NEG BX
			JMP CONT_1
		
		FISRT_CASE_0:
			PUSH BX
			PUSH AX
			ADD DX, YI
			SUB BX, AX ; dY - dX
			SHL BX, 1  ; 2 * OVO GORE
			ADD SI, BX ; D = D + OVO GORE
			POP AX
			POP BX
			JMP CONTINUE_0
		
		SECOND_CASE_0:
			PUSH BX
			PUSH AX
			SHL BX, 1 ; 2* dY
			ADD SI, BX; D = D + 2*dY
			POP AX
			POP BX
			JMP CONTINUE_0
		
		NEG_Y_SLOPE_1:
			MOV YI, -1
			NEG BX
			JMP CONT_2
		FISRT_CASE_1:
			PUSH BX
			PUSH AX
			ADD DX, YI
			SUB BX, AX ; dY - dX
			SHL BX, 1  ; 2 * OVO GORE
			ADD SI, BX ; D = D + OVO GORE
			POP AX
			POP BX
			JMP CONTINUE_1
		
		SECOND_CASE_1:
			PUSH BX
			PUSH AX
			SHL BX, 1 ; 2* dY
			ADD SI, BX; D = D + 2*dY
			POP AX
			POP BX
			JMP CONTINUE_1
	
	
	LINE_LOW ENDP
	
	LINE_HIGH PROC NEAR
		
		PUSH CX
		PUSH DX
		PUSH AX
		PUSH BX
		PUSH DI
		
		MOV CX, X_CENTER
		MOV DX, Y_CENTER
		MOV AX, X1
		MOV BX, Y1
		
		CMP DX, BX
		JG LINE_HIGH_1
		JLE LINE_HIGH_2
		
		LINE_HIGH_2:
			SUB AX, CX ; dX = X1 - X0
			SUB BX, DX ; dY = Y1 - Y0
			MOV XI, 1
			CMP AX, 0
			JL NEG_X_SLOPE
			CONT_3:
				MOV SI, AX ; dX
				SHL SI, 1  ; 2*dX
				SUB SI, BX ; D = 2*dX - dY
				MOV CX, X_CENTER
				MOV DX, Y_CENTER
				FOR_2:
					CALL DRAW_LINE
					CMP SI, 0
					JG FISRT_CASE_2
					JLE SECOND_CASE_2
					CONTINUE_2:
						INC DX
						CMP DX, Y1
						JNE FOR_2
						POP DI
						POP BX
						POP AX
						POP DX
						POP CX
						RET
			
		NEG_X_SLOPE:
			MOV XI, -1
			NEG AX
			JMP CONT_3
		FISRT_CASE_2:
			PUSH BX
			PUSH AX
			ADD CX, XI
			SUB AX, BX ; dX - dY
			SHL AX, 1  ; 2 * OVO GORE
			ADD SI, AX ; D = D + OVO GORE
			POP AX
			POP BX
			JMP CONTINUE_2
		SECOND_CASE_2:
			PUSH BX
			PUSH AX
			SHL AX, 1 ; 2* dX
			ADD SI, AX; D = D + 2*dX
			POP AX
			POP BX
			JMP CONTINUE_2
		LINE_HIGH_1:
			SUB CX, AX ; dX = X0 - X1
			MOV AX, CX ; dX IDE U AX
			SUB DX, BX ; dX = Y0 - Y1
			MOV BX, DX ; dX IDE U BX
			MOV XI, 1
			CMP AX, 0
			JL NEG_X_SLOPE_1
			CONT_4:
				MOV SI, AX ; dX
				SHL SI, 1  ; 2*dX
				SUB SI, BX  ; 2*dX - dY
				MOV CX, X1
				MOV DX, Y1
				FOR_3:
					CALL DRAW_LINE
					CMP SI, 0
					JG FISRT_CASE_3
					JLE SECOND_CASE_3
					CONTINUE_3:
						INC DX
						CMP DX, Y_CENTER
						JNE FOR_3
						POP DI
						POP BX
						POP AX
						POP DX
						POP CX
						RET
			
			NEG_X_SLOPE_1:
				MOV XI, -1
				NEG AX
				JMP CONT_4
			FISRT_CASE_3:
				PUSH BX
				PUSH AX
				ADD CX, XI
				SUB AX, BX ; dX - dY
				SHL AX, 1  ; 2 * OVO GORE
				ADD SI, AX ; D = D + OVO GORE
				POP AX
				POP BX
				JMP CONTINUE_3
				
			SECOND_CASE_3:
				PUSH BX
				PUSH AX
				SHL AX, 1 ; 2* dX
				ADD SI, AX; D = D + 2*dX
				POP AX
				POP BX
				JMP CONTINUE_3
				
			
	LINE_HIGH ENDP
	
	DRAW_LINE PROC NEAR
		
		PUSH AX
		PUSH BX
		
		MOV AH, 0Ch
		MOV AL, 0Ah
		MOV BH, 00h
		INT 10h
		
		POP BX
		POP AX
		RET
		
	DRAW_LINE ENDP
	
CSEG ENDS

SSEG SEGMENT PARA STACK 'STACK'

	DW 64 DUP(?)
	
SSEG ENDS

END MAIN
